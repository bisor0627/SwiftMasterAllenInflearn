// scripts/generate-issues.js
const fs = require("fs");
const path = require("path");
const yaml = require("js-yaml");
const { execSync } = require("child_process");

const issuesYaml = path.join(__dirname, "../plans/issues.yaml");
const issues = yaml.load(fs.readFileSync(issuesYaml, "utf-8"));

// 1. ÌòÑÏû¨ Ïó¥Î†§ÏûàÎäî Ïù¥ÏäàÎì§ÏùÑ Í∞ÄÏ†∏Ïò¥ (closed Ï†úÏô∏)
console.log("üì• Í∏∞Ï°¥ Ïù¥Ïäà Î™©Î°ù Ï°∞Ìöå Ï§ë...");
const existing = JSON.parse(
  execSync("gh issue list --state open --json title", { encoding: "utf-8" })
);
const existingTitles = new Set(existing.map((issue) => issue.title));

issues.forEach(({ title, body, labels }) => {
  if (existingTitles.has(title)) {
    console.log(`‚ö†Ô∏è Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî Ïù¥Ïäà: ${title} ‚Üí ÏÉùÏÑ± Ïä§ÌÇµ`);
    return;
  }

  console.log(`üîß Creating issue: ${title}`);
  const labelString = (labels || []).map((l) => `--label "${l}"`).join(" ");

  try {
    execSync(
      `gh issue create --title "${title}" --body "${body}" ${labelString}`,
      { stdio: "inherit" }
    );
  } catch (error) {
    console.error(`‚ùå Failed to create issue for ${title}`, error.message);
  }
});